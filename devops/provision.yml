### Build & install from sources PG, pg_pathman and pg_shardman

---
- hosts: nodes
  vars:
    ars_conf: "{{ ansible_env.HOME }}/ars_conf"

  environment:
    PATH: "{{ pg_dst }}/bin:{{ ansible_env.PATH }}"
    CFLAGS: "{{ cflags }}"
    CONFPATH: "{{ ars_conf }}"

  tasks:
  - name: set Moscow timezone
    timezone:
      name: Europe/Moscow
    become: yes
    tags:
      - tz

  - name: mount tmpfs as /tmp
    mount: >
      name=/tmp src='tmpfs' fstype=tmpfs
      opts='size={{ (ansible_memtotal_mb * 0.75) | int }}m' state=mounted
    become: yes
    tags:
      - tmpfs

  - name: update apt cache (Debian)
    apt: update_cache=yes
    become: yes
    tags:
      - apt_cache

  - name: ensure dependencies (Debian)
    apt: name={{item}} state=installed
    with_items:
    - git
    - automake
    - libtool
    - build-essential
    - bison
    - flex
    - libreadline-dev
    - zlib1g-dev
    - gdb
    when: ansible_os_family == "Debian"
    become: yes
    tags:
      - build_pg

  - name: clone postgres sources
    git: repo={{pg_repo}}
      dest={{pg_src}}
      version={{pg_version_tag}}
      depth=1
      accept_hostkey=True
    tags:
      - build_pg

  - name: build and install pg
    shell: ./configure --prefix={{pg_dst}} --enable-debug && make clean && make -j {{makejobs}} && make install
    args:
      chdir: "{{pg_src}}"
    tags:
      - build_pg

  - name: build and install postgres_fdw
    shell: make clean && make -j {{makejobs}} && make install
    args:
      chdir: "{{pg_src}}/contrib/postgres_fdw"
    tags:
      - build_pg_fdw

  - name: rm pg sources
    file: path="{{ pg_src }}" state=absent
    tags:
      - rm_pg_src

  - name: clone pathman
    git: repo={{pathman_repo}}
      dest={{pathman_src}}
      version={{pathman_version_tag}}
      depth=1
      accept_hostkey=True
    tags:
      - build_pathman

  - name: build and install pathman
    shell: USE_PGXS=1 make clean && USE_PGXS=1 make -j {{makejobs}} install
    args:
      chdir: "{{pathman_src}}"
    tags:
      - build_pathman

  - name: clone shardman
    git: repo={{shardman_repo}}
      dest={{shardman_src}}
      version={{shardman_version_tag}}
      depth=1
      accept_hostkey=True
    tags:
      - build_shardman

  - name: build and install shardman
    shell: make clean && make -j {{makejobs}} && make install
    # shell: echo ${USE_PGXS}
    args:
      chdir: "{{shardman_src}}"
    tags:
      - build_shardman

  # to run something iff tags were specified
  - shell: /bin/true
    register: tags_not_specified

  - name: clone repo with Arseny's conf
    git: repo=https://github.com/arssher/conf.git
      dest="{{ ars_conf }}"
      version=master
      depth=1
      accept_hostkey=True
    when: tags_not_specified is not defined
    tags: ars

  - name: add emacs25 repo
    apt_repository:
      repo="ppa:kelleyk/emacs"
      state=present
      update_cache=yes
    become: yes
    when: tags_not_specified is not defined and ansible_os_family == "Debian"
    tags: ars

  - name: install emacs & other stuff for Arseny
    apt: name={{item}} state=installed
    with_items:
     - x11-xkb-utils
     - emacs25
    become: yes
    when: tags_not_specified is not defined and ansible_os_family == "Debian"
    tags: ars

  - name: setup Arseny's conf
    shell: >
      "{{ ars_conf }}"/bash/.bash_scripts/bin/restore_all.sh;
    when: tags_not_specified is not defined
    tags: ars

  - name: Install packages for Arseny's emacs
    command: emacs emacs -batch --eval '(message "Hi!")' -u {{ ansible_user}}
    when: tags_not_specified is not defined
    tags: ars

  - name: set PATH in .bashrc
    lineinfile: dest=~/.bashrc line="export PATH={{ pg_dst }}/bin:$PATH"
    tags:
      - set_path

  - name: allow ptrace for non-root users
    lineinfile: dest=/etc/sysctl.d/10-ptrace.conf
      regexp='^kernel.yama.ptrace_scope'
      line='kernel.yama.ptrace_scope = 0'
      state=present
    become: yes
    tags:
      - allow_ptrace

  - name: allow ptrace for non-root users
    shell: echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
    become: yes
    tags:
      - allow_ptrace

  - name: install perf for xenial
    apt: name=linux-tools-4.4.0-1022-aws state=installed
    when: ansible_os_family == "Debian"
    become: yes
    tags:
      - perf

  - name: allow perfing
    shell: echo 0 | sudo tee /proc/sys/kernel/kptr_restrict
    become: yes
    tags: perf

  - name: download flamegraph
    git: repo=https://github.com/brendangregg/FlameGraph.git
      dest="{{ fg_path }}"
      version=master
      depth=1
      accept_hostkey=True
    tags: perf

  - name: set PATH in .bashrc
    lineinfile: dest=~/.bashrc line="export PATH={{ fg_path }}:$PATH"
    tags:
      - perf

- import_playbook: init.yml
  tags:
    - init